C51 COMPILER V9.01   RGB                                                                   02/18/2022 20:27:46 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE RGB
OBJECT MODULE PLACED IN RGB.obj
COMPILER INVOKED BY: E:\ruanjian\keil\C51\BIN\C51.EXE HARDWARE\RGB.c BROWSE INCDIR(.\HARDWARE\1602;.\HARDWARE\OLED;.\HAR
                    -DWARE;.\HARDWARE) DEBUG OBJECTEXTEND PRINT(.\RGB.lst) OBJECT(RGB.obj)

line level    source

   1          #include "RGB.h"
   2          #include "delay.h"
   3          uchar ge,shi,bai ;
   4          uchar flag_R=48,flag_G=48,flag_B=48;
   5          uchar disp_R[3];  //红
   6          uchar disp_G[3];  //绿
   7          uchar disp_B[3];  //蓝
   8          uchar count;          //颜色标志位（0:红 1:绿 2:蓝）
   9          uint temp;
  10          uchar dianji,yanse;
  11          sbit s2=P0^3;        //TCS3200 S2        P0^4
  12          sbit s3=P0^4;        //TCS3200 S3        P0^3
  13                               //TCS3200 S0 模块内部默认上拉      5V
  14                               //TCS3200 S1 模块内部默认上拉      5V
  15                               //TCS3200 OE 模块内部接地
  16                                                   //TCS3200 OUT 接P3^5给脉冲
  17          void Color_recognition()
  18          {
  19   1              uint temp_[3];
  20   1              uint num;
  21   1              TR0=0;              //关闭定时
  22   1              TR1=0;              //关闭计数
  23   1              //   count+1实现先检测绿色,再检测蓝色,然后检测红色,循环检测       
  24   1              if(count==0)
  25   1              {
  26   2                      count++;    
  27   2                      s2=1;s3=1;             //选择滤波器为绿色     
  28   2                      
  29   2                      temp=(8<<TH1)+TL1;    //计算这段时间内 TCS230 的输出脉冲数      
  30   2      //              temp/=rp;                       
  31   2                      conversion(temp);
  32   2                       temp_[0] = temp;
  33   2                      disp_G[2]=ge;         //因为这次的中断，是上次选择滤波器的数值
  34   2                      disp_G[1]=shi;
  35   2                      disp_G[0]=bai;
  36   2                      
  37   2              }       
  38   1              else if(count==1)
  39   1              {            
  40   2                      count++;
  41   2                      s2=1;s3=0;            //选择滤波器为蓝色
  42   2                      temp=(8<<TH1)+TL1;    //计算这段时间内 TCS230 的输出脉冲数      
  43   2      //              temp/=gp;                       
  44   2                      conversion(temp);
  45   2                      temp_[1] = temp;
  46   2                      disp_B[2]=ge;         //因为这次的中断，是上次选择滤波器的数值
  47   2                      disp_B[1]=shi;
  48   2                      disp_B[0]=bai;
  49   2              }       
  50   1              else if(count==2)
  51   1              {            
  52   2                      count=0;
  53   2                      s2=0;s3=0;            //选择滤波器为红色
  54   2                      
C51 COMPILER V9.01   RGB                                                                   02/18/2022 20:27:46 PAGE 2   

  55   2                      temp=(8<<TH1)+TL1;    //计算这段时间内 TCS230 的输出脉冲数      
  56   2      //              temp/=bp;               
  57   2                      conversion(temp);
  58   2                      temp_[2] = temp;
  59   2                      disp_R[2]=ge;         //因为这次的中断，是上次选择滤波器的数值
  60   2                      disp_R[1]=shi;
  61   2                      disp_R[0]=bai;
  62   2              
  63   2              }
  64   1              num++;
  65   1              if(num==150)
  66   1              {               
  67   2              
  68   2                      compare(temp_[0],temp_[1],temp_[2]);//变量进去  
  69   2                      dianji =1;                                      //打开电机
  70   2                      yanse =0;                                       //关闭颜色识别
  71   2                      num=0;                                          //计数值清零
  72   2                      
  73   2                      beep=~beep;                                     //识别一次蜂鸣器响两次
  74   2                      delay(100);
  75   2                      beep=~beep;
  76   2                      delay(100);
  77   2                      beep=~beep;
  78   2                      delay(100);
  79   2                      beep=~beep;
  80   2                      delay(100);
  81   2              }
  82   1              //定时器计数器重赋初值
  83   1              TH0=0xE0;
  84   1              TL0=0x00; //11。0592M 晶振，为10ms
  85   1              TL1=0x00;//计数器清零
  86   1              TH1=0x00;//计数器清零
  87   1              TR0=1;   //打开定时器
  88   1              TR1=1;   //打开计数器
  89   1      }
  90          void conversion(uint temp_data)  
  91          {        
  92   1      
  93   1          bai=temp_data/100+0x30 ;
  94   1          temp_data=temp_data%100;   //取余运算
  95   1          shi=temp_data/10+0x30 ;
  96   1          ge=temp_data%10+0x30;      //取余运算
  97   1      }
  98          
  99          uint compare(uint G,uint B,uint R)
 100          {
 101   1              if(G>B)
 102   1              {
 103   2                      if(G>R)
 104   2                      {
 105   3                      flag_G++;
 106   3                      R_LED=~R_LED;
 107   3                      delay(200);
 108   3                      R_LED=~R_LED;
 109   3                      return G;
 110   3                       }
 111   2                         else 
 112   2                         {    
 113   3                              B_LED=~B_LED;
 114   3                              delay(200);
 115   3                              B_LED=~B_LED;
 116   3                              flag_R++;
C51 COMPILER V9.01   RGB                                                                   02/18/2022 20:27:46 PAGE 3   

 117   3                              return R;
 118   3                                  
 119   3                         }
 120   2              }
 121   1              else {
 122   2              if(B>R)
 123   2              {
 124   3                      flag_B++;
 125   3                      G_LED=~G_LED;
 126   3                      delay(200);
 127   3                      G_LED=~G_LED;
 128   3                       return B;
 129   3              }
 130   2                else
 131   2                {
 132   3                      flag_R++;
 133   3                      B_LED=~B_LED;
 134   3                      delay(200);
 135   3                      B_LED=~B_LED;
 136   3                        return R;
 137   3                } 
 138   2                
 139   2                }
 140   1                      
 141   1      }
 142          
 143          void parameter_Init()
 144          {
 145   1              s2=0;           //初始设定S2引脚
 146   1              s3=0;           //初始设定S3引脚
 147   1      }
 148          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    436    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     20      14
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
